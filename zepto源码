var Zepto = function () {
    var zepto = {},
        emptyArray = [],
        slice = emptyArray.slice,
        // 正则判断是否以0个或多个空格开头的一个或多个字符或！，不包括>,最后以>结尾
        fragmentRE = /^\s*<(\w+|!)[^>]*>/ ,
        // 匹配单标签
        singleTagRE = /^<(\w+)\s*\/?>(?:<\/1>|)$/ ,
        // 匹配以<开头过滤掉area等一些字符，一个或多个字符不包括零个或多个>,以/>结尾
        // 修复html,
        tagExpanderRE = /^<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,

        // 通过方法调用获得/设置的特殊属性
        methodAttributes = ['val','css','html','text','data','width','height','offset'],
        // 创建table标签
        table = document.createElement('table'),
        // 创建tr标签
        tableRow = document.createElement('tr'),
        containers = {
            'tr': document.createElement('tbody'),
            'tbody': table,
            'thead': table,
            'tfoot': table,
            'td': tableRow,
            'th': tableRow,
            '*': document.createElement('div')
        };


    zepto.init = function (selector, context) {
        var dom;
        if(!selector) return zepto.Z()
        else if (typeof selector == 'string') {
            selector = selector.trim(); // 去除左右空格
            if(selector[0] == '<' && fragmentRE.test(selector)){
                dom = zepto.fragment(selector,RegExp.$1,context),
                selector = null;
            }else if(context !== undefined) return $(context).find(selector)
            else dom = zepto.qsa(document, selector)
        }else if (isFunction(selector)) return $(document).ready(selector)
        // 如果已经为zepto对象了，直接返回
        else if(zepto.isZ(selector)) return selector
        else {
            if(isArray(selector)) dom = compact(selector)
            else if (isObject(selector)) {
                dom = [selector],
                selector = null
            }else if( fragmentRE.test(selector)) {
                dom.zepto.fragment(selector.trim(),RegExp.$1, context),
                selector = null
            }else if (context != undefined) return $(context).find(selector)
            else dom = zepto.qsa(document, selector)
        }
        // 从发现的节点创建一个新的Zepto集合
        return zepto.Z(dom, selector)
    }
    zepto.Z = function (dom, selector) {
        return new Z(dom, selector)
    }

    zepto.fragment = function(html, name, properties) {
        var dom, nodex, container
        // 对单标签进行特殊的案例优化，例：<a/>
        if (singleTagRE.test(html)) {
            dom = $(document.createElement(RegExp.$1))
        }
        // 如果没有匹配到单标签
        if (!dom) {
            // 如果有replace方法说明html 为字符串，把原来的字符串替换成合法的字符串
            if (html.replace) html = html.replace(tagExpanderRE, '<$1></$2>')
            // 如果name 严格等于undefined，则将匹配的标签名给name
            if (name === undefined) name = fragmentRE.test(html) && RegExp.$1
            // 判断name是否是containers的一个属性，如果不是则将‘*’赋给name
            if (!(name in containers)) name = '*'
            // 创建一个标签（div 或其他标签）
            container = containers[name];
            // 设置标签的html为获取的html
            container.innerHTML = html;
            // 将container里面的所有元素删除，并返回删除的元素
            dom = $.each(slice.call(container.childNodes), function () {
                container.removeChild(this)
            })
        }
        if (isPlainObject(properties)) {
            nodes = $(dom);
            $.each(properties, function (key, value) {
                if (methodAttributes.indexOf(key) > -1) nodes[key](value)
                else nodes.attr(key, value)
            })
        }
        return dom
    }
    $ = function (selector,contex) {
        return zepto.init(selector, contex)
    }

    return $;
}

window.Zepto = Zepto;
window.$ === undefined && (window.$ = Zepto)
